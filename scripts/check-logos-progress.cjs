#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
 */

const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  LOGOS_DIR: path.join(__dirname, '..', 'public', 'team-logos'),
  LOG_FILE: path.join(__dirname, '..', 'logs', 'team-logos-download.log'),
  PROGRESS_FILE: path.join(__dirname, '..', 'logs', 'team-logos-progress.json'),
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

function formatDuration(ms) {
  const seconds = Math.floor(ms / 1000)
  const minutes = Math.floor(seconds / 60)
  const hours = Math.floor(minutes / 60)
  
  if (hours > 0) {
    return `${hours}—á ${minutes % 60}–º ${seconds % 60}—Å`
  } else if (minutes > 0) {
    return `${minutes}–º ${seconds % 60}—Å`
  } else {
    return `${seconds}—Å`
  }
}

function main() {
  console.log('üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥')
  console.log('=====================================')
  console.log('')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  if (fs.existsSync(CONFIG.PROGRESS_FILE)) {
    try {
      const progress = JSON.parse(fs.readFileSync(CONFIG.PROGRESS_FILE, 'utf8'))
      
      console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:')
      console.log(`   –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${progress.currentPage}`)
      console.log(`   –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${progress.totalPages || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`)
      
      if (progress.totalPages) {
        const percentage = Math.round((progress.currentPage / progress.totalPages) * 100)
        console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%`)
      }
      
      console.log('')
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:')
      console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${progress.totalTeams}`)
      console.log(`   –õ–æ–≥–æ—Ç–∏–ø–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${progress.downloadedLogos}`)
      console.log(`   –õ–æ–≥–æ—Ç–∏–ø–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${progress.skippedLogos}`)
      console.log(`   –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: ${progress.failedLogos}`)
      
      if (progress.totalTeams > 0) {
        const successRate = Math.round((progress.downloadedLogos / progress.totalTeams) * 100)
        console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`)
      }
      
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e.message)
    }
  } else {
    console.log('üìù –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∑–∞–≥—Ä—É–∑–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å')
  }

  console.log('')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏
  if (fs.existsSync(CONFIG.LOGOS_DIR)) {
    const files = fs.readdirSync(CONFIG.LOGOS_DIR).filter(file => file.endsWith('.png'))
    
    console.log('üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:')
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`)
    
    if (files.length > 0) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
      let totalSize = 0
      files.forEach(file => {
        const filePath = path.join(CONFIG.LOGOS_DIR, file)
        const stats = fs.statSync(filePath)
        totalSize += stats.size
      })
      
      console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${formatBytes(totalSize)}`)
      console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${formatBytes(totalSize / files.length)}`)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const sortedFiles = files
        .map(file => {
          const filePath = path.join(CONFIG.LOGOS_DIR, file)
          const stats = fs.statSync(filePath)
          return { file, mtime: stats.mtime, size: stats.size }
        })
        .sort((a, b) => b.mtime - a.mtime)
        .slice(0, 5)
      
      console.log('')
      console.log('üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:')
      sortedFiles.forEach(({ file, mtime, size }) => {
        const teamId = file.replace('.png', '')
        const timeAgo = Date.now() - mtime.getTime()
        console.log(`   ${teamId}.png (${formatBytes(size)}) - ${formatDuration(timeAgo)} –Ω–∞–∑–∞–¥`)
      })
    }
  } else {
    console.log('üìÅ –ü–∞–ø–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
  }

  console.log('')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥ —Ñ–∞–π–ª
  if (fs.existsSync(CONFIG.LOG_FILE)) {
    const logContent = fs.readFileSync(CONFIG.LOG_FILE, 'utf8')
    const lines = logContent.trim().split('\n')
    
    console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:')
    const lastLines = lines.slice(-5)
    lastLines.forEach(line => {
      // –£–±–∏—Ä–∞–µ–º timestamp –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
      const message = line.replace(/^\[.*?\] /, '')
      console.log(`   ${message}`)
    })
    
    console.log('')
    console.log(`üìÑ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: ${lines.length}`)
  } else {
    console.log('üìã –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
  }

  console.log('')
  console.log('üöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:')
  console.log('   npm run logos:test      - –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (5 –∫–æ–º–∞–Ω–¥)')
  console.log('   npm run logos:download  - –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤')
  console.log('   npm run logos:status    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å')
  console.log('')
}

// –ó–∞–ø—É—Å–∫
main()