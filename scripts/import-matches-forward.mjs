#!/usr/bin/env node

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π (–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—ÇÔøΩÔøΩ –≤ –ë–î –≤–ø–µ—Ä—ë–¥).
 * –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–ø—É—Å–∫–∞–º–∏.
 *
 * –ò—Å—Ç–æ—á–Ω–∏–∫: matches/history.json API
 *
 * –ó–∞–ø—É—Å–∫:
 *   node scripts/import-matches-forward.mjs [--days=7] [--pageSize=30] [--withStats] [--loop] [--interval=600000]
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *   --days=N         –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
 *   --pageSize=N     –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 *   --no-stats       –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)
 *   --loop           –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 *   --interval=N     –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600000 = 10 –º–∏–Ω)
 *
 * –õ–æ–≥–∏–∫–∞:
 * - –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –º–∞—Ç—á–∞ –≤ –ë–î
 * - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—á–∏ —Å —ç—Ç–æ–π –¥–∞—Ç—ã –Ω–∞ N –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
 * - –ï—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
 *
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –í .env –∑–∞–¥–∞–Ω—ã DATABASE_URI, PAYLOAD_SECRET, LIVESCORE_KEY, LIVESCORE_SECRET
 */

import dotenv from 'dotenv'
import { getPayload } from 'payload'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { processHistoryPeriod } from './matches-history-sync.mjs'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ó–∞–≥—Ä—É–∑–∫–∞ env
const envCandidates = [
  path.resolve(process.cwd(), '.env'),
  path.resolve(process.cwd(), '.env.local'),
  path.resolve(__dirname, '.env'),
  path.resolve(__dirname, '.env.local'),
  path.resolve(process.cwd(), '.env.docker'),
  path.resolve(__dirname, '.env.docker'),
]
for (const p of envCandidates) {
  dotenv.config({ path: p })
}

const mask = (v) =>
  typeof v === 'string' && v.length > 6 ? `${v.slice(0, 3)}***${v.slice(-2)}` : v ? 'set' : 'empty'
console.log('[INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
console.log(`       DATABASE_URI: ${process.env.DATABASE_URI ? 'set' : 'empty'}`)
console.log(`       PAYLOAD_SECRET: ${process.env.PAYLOAD_SECRET ? 'set' : 'empty'}`)
console.log(`       LIVESCORE_KEY: ${mask(process.env.LIVESCORE_KEY)}`)
console.log(`       LIVESCORE_SECRET: ${mask(process.env.LIVESCORE_SECRET)}`)

function parseArg(name, def = undefined) {
  const k = `--${name}=`
  const found = process.argv.find((a) => a.startsWith(k))
  if (found) return found.slice(k.length)
  return def
}

function hasFlag(name) {
  return process.argv.includes(`--${name}`)
}

function formatDateForApi(date) {
  return date.toISOString().split('T')[0]
}

function getDateRange(days, fromDate = new Date()) {
  const from = new Date(fromDate)
  const to = new Date(from)
  to.setDate(to.getDate() + days)

  return {
    from: formatDateForApi(from),
    to: formatDateForApi(to),
  }
}

async function getLatestMatchDate(payload) {
  try {
    const res = await payload.find({
      collection: 'matches',
      sort: '-date', // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
      limit: 1,
      depth: 0,
      overrideAccess: true,
    })
    if (res.docs.length > 0) {
      return new Date(res.docs[0].date)
    }
  } catch (e) {
    console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑ –ë–î:', e?.message || e)
  }
  return null
}

async function syncMatches(payload, { days = 7, pageSize = 30, withStats = true } = {}) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –¥–∞—Ç—É: –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ –ë–î –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
  let startDate = new Date()
  
  const latestDate = await getLatestMatchDate(payload)
  if (latestDate) {
    startDate = new Date(latestDate)
    console.log(`[SYNC] –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ –ë–î: ${startDate.toLocaleDateString('ru-RU')}`)
  } else {
    console.log(`[SYNC] –í –ë–î –Ω–µ—Ç –º–∞—Ç—á–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã`)
  }

  const dateRange = getDateRange(days, startDate)
  console.log(`[SYNC] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ–π —Å ${dateRange.from} –ø–æ ${dateRange.to}`)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { processed, stats } = await processHistoryPeriod(payload, {
    from: dateRange.from,
    to: dateRange.to,
    pageSize,
    withStats,
  })

  return { processed, stats }
}

async function runOnce(payload, options) {
  console.log('\n' + '='.repeat(60))
  console.log('–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ê–ö–¢–£–ê–õ–¨–ù–´–• –ú–ê–¢–ß–ï–ô')
  console.log('='.repeat(60))

  const startTime = Date.now()
  const { processed, stats } = await syncMatches(payload, options)
  const duration = Date.now() - startTime

  console.log('\n' + '='.repeat(60))
  console.log('–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê')
  console.log('='.repeat(60))
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`)
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`)
  console.log(`   ‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: ${stats.created}`)
  console.log(`   ‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${stats.updated}`)
  console.log(`   ‚Ä¢ ‚â° –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${stats.skipped}`)
  console.log(`   ‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: ${stats.errors}`)
  console.log(`   ‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(duration / 1000)} —Å–µ–∫`)
  console.log('='.repeat(60))

  if (stats.errors > 0) {
    console.log(`‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: ${stats.errors} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏`)
  }

  const changesCount = stats.created + stats.updated
  if (changesCount > 0) {
    console.log(`‚ú® –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${changesCount} –∑–∞–ø–∏—Å–µ–π`)
  } else {
    console.log(`‚ÑπÔ∏è  –í—Å–µ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`)
  }

  return { processed, stats, duration }
}

async function runLoop(payload, options, interval) {
  console.log(`[LOOP] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval / 1000} —Å–µ–∫`)

  let iteration = 0
  while (true) {
    iteration++
    console.log(`\n[LOOP] === –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration} ===`)

    try {
      await runOnce(payload, options)
    } catch (error) {
      console.error(`[LOOP] –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iteration}:`, error.message)
      if (process.env.DEBUG_MATCHES === '1') {
        console.error('[DEBUG] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
      }
    }

    console.log(`[LOOP] –û–∂–∏–¥–∞–Ω–∏–µ ${interval / 1000} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...`)
    await new Promise((resolve) => setTimeout(resolve, interval))
  }
}

async function main() {
  const days = Number(parseArg('days', 7))
  const pageSize = Number(parseArg('pageSize', 30))
  const withStats = !hasFlag('no-stats') // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ñ–ª–∞–≥–æ–º --no-stats
  const loop = hasFlag('loop')
  const interval = Number(parseArg('interval', 600000)) // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  if (!process.env.DATABASE_URI) {
    console.error('–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω DATABASE_URI –≤ .env')
    process.exit(1)
  }
  if (!process.env.PAYLOAD_SECRET) {
    console.error('–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω PAYLOAD_SECRET –≤ .env')
    process.exit(1)
  }
  if (!process.env.LIVESCORE_KEY || !process.env.LIVESCORE_SECRET) {
    console.warn(
      '[WARN] –ù–µ –∑–∞–¥–∞–Ω—ã LIVESCORE_KEY/LIVESCORE_SECRET ‚Äî API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    )
  }

  console.log('[STEP] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Payload Local API')
  const { default: config } = await import('../src/payload.config.ts')
  const payload = await getPayload({ config })

  console.log(`[CONFIG] days=${days}, pageSize=${pageSize}, withStats=${withStats}`)
  const options = { days, pageSize, withStats }

  if (loop) {
    await runLoop(payload, options, interval)
  } else {
    await runOnce(payload, options)

    if (payload?.db?.drain) {
      await payload.db.drain()
    }
    process.exit(0)
  }
}

main().catch(async (err) => {
  console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ç—á–µ–π:')
  console.error(err)
  try {
    const payload = globalThis?.payload
    if (payload?.db?.drain) await payload.db.drain()
  } catch {}
  process.exit(1)
})
