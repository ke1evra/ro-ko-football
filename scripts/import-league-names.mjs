#!/usr/bin/env node

/**
 * –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏–≥ –≤ Payload CMS.
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ customName –ø–æ competitionId. –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç (–≤–∫–ª—é—á–∞—è null).
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   pnpm leagues:names:import exports/league-names-YYYY-MM-DD-translated.json
 */

import dotenv from 'dotenv'
import { fileURLToPath } from 'node:url'
import path from 'node:path'
import fs from 'node:fs/promises'
import { getPayload } from 'payload'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–∞
dotenv.config({ path: path.resolve(__dirname, '../.env') })

async function importLeagueNames() {
  let input = process.argv[2]
  let filePath

  if (!input) {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –≤ exports —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º -translated.json
    const exportsDir = path.resolve(process.cwd(), 'exports')
    try {
      const files = await fs.readdir(exportsDir)
      const translated = files
        .filter((f) => /^league-names-.*-translated\.json$/.test(f))
        .map((f) => path.join(exportsDir, f))

      if (translated.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const withStat = await Promise.all(
          translated.map(async (p) => ({ p, stat: await fs.stat(p) })),
        )
        withStat.sort((a, b) => b.stat.mtimeMs - a.stat.mtimeMs)
        filePath = withStat[0].p
        console.log(
          `‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π: ${path.basename(filePath)}`,
        )
      } else {
        // –ù–µ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        const originals = files
          .filter((f) => /^league-names-.*\.json$/.test(f) && !/-translated\.json$/.test(f))
          .map((f) => path.join(exportsDir, f))
        if (originals.length > 0) {
          const withStatOrig = await Promise.all(
            originals.map(async (p) => ({ p, stat: await fs.stat(p) })),
          )
          withStatOrig.sort((a, b) => b.stat.mtimeMs - a.stat.mtimeMs)
          const candidate = withStatOrig[0].p
          const translatedCandidate = candidate.replace(/\.json$/, '-translated.json')
          try {
            await fs.access(translatedCandidate)
            filePath = translatedCandidate
            console.log(
              `‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥: ${path.basename(filePath)}`,
            )
          } catch {
            console.error('‚ùå –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:')
            console.error('   pnpm leagues:names:translate:latest')
            process.exit(1)
          }
        } else {
          console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –ø–∞–ø–∫–µ exports. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç:')
          console.error('   pnpm leagues:names:export')
          process.exit(1)
        }
      }
    } catch (e) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É exports:', e?.message || e)
      process.exit(1)
    }
  } else {
    filePath = path.resolve(input)
  }

  try {
    const raw = await fs.readFile(filePath, 'utf8')
    const data = JSON.parse(raw)

    if (!Array.isArray(data.leagues)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ leagues')
    }

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ—Å–ª–µ dotenv
    const { default: config } = await import('../src/payload.config.ts')
    const payload = await getPayload({ config })

    let updated = 0
    let skipped = 0
    let notFound = 0
    let errors = 0

    for (const league of data.leagues) {
      try {
        if (typeof league.competitionId !== 'number') {
          skipped++
          continue
        }

        const existing = await payload.find({
          collection: 'leagues',
          where: { competitionId: { equals: league.competitionId } },
          limit: 1,
          overrideAccess: true,
        })

        if (!existing.docs.length) {
          notFound++
          console.warn(
            `‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–∏–≥–∞ competitionId=${league.competitionId} (${league.name || 'unknown'})`,
          )
          continue
        }

        const doc = existing.docs[0]
        await payload.update({
          collection: 'leagues',
          id: doc.id,
          data: { customName: league.customName ?? null },
          overrideAccess: true,
        })

        updated++
      } catch (e) {
        errors++
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ competitionId=${league?.competitionId}:`,
          e?.message || e,
        )
      }
    }

    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!')
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`)
    console.log(`   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏): ${skipped}`)
    console.log(`   ‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${notFound}`)
    console.log(`   ‚Ä¢ –û—à–∏–±–æ–∫: ${errors}`)

    process.exit(0)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error)
    process.exit(1)
  }
}

importLeagueNames()
