#!/usr/bin/env node

/**
 * –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ–π (–æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –Ω–∞–∑–∞–¥), —á–µ—Ä–µ–∑ –æ–±—â–∏–π –º–æ–¥—É–ª—å.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å—É—Ç–æ—á–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é (from/to + page, size=30) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API.
 *
 * –ó–∞–ø—É—Å–∫:
 *   node scripts/import-matches-backward.mjs \
 *     [--days=30] [--pageSize=30] [--maxDays=3650] [--loop] [--interval=86400000] \
 *     [--startDate=YYYY-MM-DD] [--competitions=1,2] [--teams=19,7] [--withStats] [--maxRequests=45000]
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *   --days=N         –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–Ω–µ–π –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 *   --pageSize=N     –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 *   --maxDays=N      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3650 ~ 10 –ª–µ—Ç)
 *   --startDate=...  –ù–∞—á–∞—Ç—å —Å —ç—Ç–æ–π –¥–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî earliestInDB - 1 –¥–µ–Ω—å)
 *   --competitions   CSV ids —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π (competition_id)
 *   --teams          CSV ids –∫–æ–º–∞–Ω–¥ (team_id)
 *   --no-stats       –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)
 *   --loop           –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
 *   --interval=ms    –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –≤ loop (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24—á)
 *   --maxRequests=N  –õ–∏–º–∏—Ç HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞ –∑–∞–ø—É—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 45000)
 */

import dotenv from 'dotenv'
import { getPayload } from 'payload'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { processHistoryPeriod, setRequestBudget } from './matches-history-sync.mjs'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ó–∞–≥—Ä—É–∑–∫–∞ env
const envCandidates = [
  path.resolve(process.cwd(), '.env'),
  path.resolve(process.cwd(), '.env.local'),
  path.resolve(__dirname, '.env'),
  path.resolve(__dirname, '.env.local'),
  path.resolve(process.cwd(), '.env.docker'),
  path.resolve(__dirname, '.env.docker'),
]
for (const p of envCandidates) dotenv.config({ path: p })

const mask = (v) =>
  typeof v === 'string' && v.length > 6 ? `${v.slice(0, 3)}***${v.slice(-2)}` : v ? 'set' : 'empty'

function parseArg(name, def = undefined) {
  const k = `--${name}=`
  const found = process.argv.find((a) => a.startsWith(k))
  if (found) return found.slice(k.length)
  return def
}
function hasFlag(name) {
  return process.argv.includes(`--${name}`)
}

function formatDateISO(d) {
  const x = new Date(d)
  return x.toISOString().split('T')[0]
}

async function getEarliestMatchDate(payload) {
  try {
    const res = await payload.find({
      collection: 'matches',
      sort: 'date',
      limit: 1,
      depth: 0,
      overrideAccess: true,
    })
    if (res.docs.length > 0) {
      return new Date(res.docs[0].date)
    }
  } catch (e) {
    console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –∏–∑ –ë–î:', e?.message || e)
  }
  return null
}

async function runOnce(
  payload,
  { days, pageSize, maxDays, startDate, competitions, teams, withStats = true, maxRequests },
) {
  console.log('\n' + '='.repeat(60))
  console.log('–†–ï–¢–†–û–°–ü–ï–ö–¢–ò–í–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–ê–¢–ß–ï–ô')
  console.log('='.repeat(60))

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫
  const budget = Number(maxRequests)
  setRequestBudget(budget)
  console.log(`[INFO] –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: ${Number.isFinite(budget) ? budget : '‚àû'}`)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ¬´—Ç–µ–∫—É—â—É—é¬ª –¥–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω—ë–º –∏–¥—Ç–∏ –Ω–∞–∑–∞–¥
  let current = startDate ? new Date(startDate) : new Date()
  if (!startDate) {
    const earliest = await getEarliestMatchDate(payload)
    if (earliest) {
      current = new Date(earliest)
      current.setDate(current.getDate() - 1) // –Ω–∞ –¥–µ–Ω—å —Ä–∞–Ω—å—à–µ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π
    }
  }

  const minDate = new Date()
  minDate.setDate(minDate.getDate() - Number(maxDays))

  console.log(`[INFO] –°—Ç–∞—Ä—Ç–æ–≤–∞—è –¥–∞—Ç–∞: ${current.toLocaleDateString('ru-RU')}`)
  console.log(`[INFO] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: ${minDate.toLocaleDateString('ru-RU')}`)
  console.log(`[INFO] –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ${days} –¥–Ω–µ–π, pageSize=${pageSize}`)
  if (competitions) console.log(`[INFO] –§–∏–ª—å—Ç—Ä competitions: ${competitions}`)
  if (teams) console.log(`[INFO] –§–∏–ª—å—Ç—Ä teams: ${teams}`)

  let iteration = 0
  let totalProcessed = 0
  const totalStats = { created: 0, skipped: 0, errors: 0 }

  while (current >= minDate) {
    iteration++
    const blockEnd = new Date(current) // –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞
    const blockStart = new Date(current)
    blockStart.setDate(blockStart.getDate() - (Number(days) - 1)) // –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –≤ –±–ª–æ–∫–µ

    const from = formatDateISO(blockStart)
    const to = formatDateISO(blockEnd)

    console.log(`\n[SYNC] === –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration} ===`)
    console.log(`[SYNC] –ü–µ—Ä–∏–æ–¥: ${from} - ${to}`)

    const { processed, stats, exhausted } = await processHistoryPeriod(payload, {
      from,
      to,
      pageSize: Number(pageSize),
      competitionIds: competitions,
      teamIds: teams,
      withStats,
    })

    totalProcessed += processed
    totalStats.created += stats.created
    totalStats.skipped += stats.skipped
    totalStats.errors += stats.errors

    console.log(
      `[SYNC] –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=${processed}, —Å–æ–∑–¥–∞–Ω–æ=${stats.created}, –ø—Ä–æ–ø—É—â–µ–Ω–æ=${stats.skipped}, –æ—à–∏–±–æ–∫=${stats.errors}`,
    )

    if (exhausted) {
      console.warn('[SYNC] –û—Å—Ç–∞–Ω–æ–≤ –ø–æ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤')
      break
    }

    // –°–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞–∑–∞–¥ –Ω–∞ —Ü–µ–ª—ã–π –±–ª–æ–∫ (–Ω–∞ –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞)
    current = new Date(blockStart)
    current.setDate(current.getDate() - 1)

    if (current < minDate) {
      console.log(`[SYNC] –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ ${minDate.toLocaleDateString('ru-RU')}`)
      break
    }
  }

  console.log('\n' + '='.repeat(60))
  console.log('–†–ï–¢–†–û–°–ü–ï–ö–¢–ò–í–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê')
  console.log('='.repeat(60))
  console.log(`üìä –ò—Ç–æ–≥–æ:`)
  console.log(`   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`)
  console.log(`   ‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${totalStats.created}`)
  console.log(`   ‚Ä¢ ‚â° –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${totalStats.skipped}`)
  console.log(`   ‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: ${totalStats.errors}`)
  return { totalProcessed, totalStats }
}

async function runLoop(payload, options, interval) {
  console.log(`[LOOP] –†–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –∏–Ω—Ç–µ—Ä–≤–∞–ª ${Math.round(interval / 1000)}—Å`)
  let iter = 0
  while (true) {
    iter++
    console.log(`\n[LOOP] === –¶–∏–∫–ª ${iter} ===`)
    try {
      await runOnce(payload, options)
    } catch (e) {
      console.error('[LOOP] –û—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏:', e?.message || e)
    }
    await new Promise((r) => setTimeout(r, interval))
  }
}

async function main() {
  console.log('[INIT] –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
  console.log(`       DATABASE_URI: ${process.env.DATABASE_URI ? 'set' : 'empty'}`)
  console.log(`       PAYLOAD_SECRET: ${process.env.PAYLOAD_SECRET ? 'set' : 'empty'}`)
  console.log(`       LIVESCORE_KEY: ${mask(process.env.LIVESCORE_KEY)}`)
  console.log(`       LIVESCORE_SECRET: ${mask(process.env.LIVESCORE_SECRET)}`)

  const days = Number(parseArg('days', 30))
  const pageSize = Number(parseArg('pageSize', 30))
  const maxDays = Number(parseArg('maxDays', 3650))
  const startDate = parseArg('startDate')
  const competitions = parseArg('competitions') // CSV —Å—Ç—Ä–æ–∫–∞
  const teams = parseArg('teams') // CSV —Å—Ç—Ä–æ–∫–∞
  const withStats = !hasFlag('no-stats') // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ñ–ª–∞–≥–æ–º --no-stats
  const loop = hasFlag('loop')
  const interval = Number(parseArg('interval', 86400000))
  const maxRequests = Number(parseArg('maxRequests', 10000))

  if (!process.env.DATABASE_URI) {
    console.error('–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω DATABASE_URI –≤ .env')
    process.exit(1)
  }
  if (!process.env.PAYLOAD_SECRET) {
    console.error('–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω PAYLOAD_SECRET –≤ .env')
    process.exit(1)
  }
  if (!process.env.LIVESCORE_KEY || !process.env.LIVESCORE_SECRET) {
    console.warn(
      '[WARN] –ù–µ –∑–∞–¥–∞–Ω—ã LIVESCORE_KEY/LIVESCORE_SECRET ‚Äî API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    )
  }

  console.log('[STEP] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Payload Local API')
  const { default: config } = await import('../src/payload.config.ts')
  const payload = await getPayload({ config })

  console.log(
    `[CONFIG] days=${days}, pageSize=${pageSize}, withStats=${withStats}, maxRequests=${maxRequests}`,
  )
  const options = {
    days,
    pageSize,
    maxDays,
    startDate,
    competitions,
    teams,
    withStats,
    maxRequests,
  }

  if (loop) {
    await runLoop(payload, options, interval)
  } else {
    await runOnce(payload, options)
    if (payload?.db?.drain) await payload.db.drain()
    process.exit(0)
  }
}

main().catch(async (err) => {
  console.error('–û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ç—á–µ–π:')
  console.error(err)
  try {
    const payload = globalThis?.payload
    if (payload?.db?.drain) await payload.db.drain()
  } catch {}
  process.exit(1)
})
