#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * - –ù–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * - –°–±–æ—Ä–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * - –ù–∞–ª–∏—á–∏–µ PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

import fs from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import dotenv from 'dotenv'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const projectRoot = path.resolve(__dirname, '..')

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(projectRoot, '.env') })

const checks = []
let hasErrors = false

function addCheck(name, status, message = '') {
  checks.push({ name, status, message })
  if (!status) hasErrors = true
}

function checkFile(filePath, name) {
  const exists = fs.existsSync(filePath)
  addCheck(name, exists, exists ? '‚úì' : `–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
  return exists
}

function checkEnvVar(varName, required = true) {
  const exists = !!process.env[varName]
  addCheck(
    `–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${varName}`,
    !required || exists,
    exists
      ? '‚úì'
      : required
        ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞'
        : '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞',
  )
  return exists
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É...\n')

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:')
checkFile(path.join(projectRoot, 'package.json'), 'package.json')
checkFile(path.join(projectRoot, 'next.config.mjs'), 'next.config.mjs')
checkFile(path.join(projectRoot, 'src/payload.config.ts'), 'payload.config.ts')
checkFile(path.join(projectRoot, 'ecosystem.config.js'), 'ecosystem.config.js')
checkFile(path.join(projectRoot, '.next/BUILD_ID'), '–°–±–æ—Ä–∫–∞ Next.js (.next/BUILD_ID)')

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const logsDir = path.join(projectRoot, 'logs')
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true })
  addCheck('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs', true, '‚úì –°–æ–∑–¥–∞–Ω–∞')
} else {
  addCheck('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs', true, '‚úì –°—É—â–µ—Å—Ç–≤—É–µ—Ç')
}

const workersDir = path.join(projectRoot, 'workers')
addCheck(
  '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è workers',
  fs.existsSync(workersDir),
  fs.existsSync(workersDir) ? '‚úì' : '–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é workers',
)

console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
checkEnvVar('DATABASE_URI')
checkEnvVar('PAYLOAD_SECRET')
checkEnvVar('NODE_ENV')

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
checkEnvVar('PORT', false)
checkEnvVar('RESEND_API_KEY', false)
checkEnvVar('EMAIL_FROM', false)
checkEnvVar('APP_URL', false)
checkEnvVar('LIVESCORE_KEY', false)
checkEnvVar('LIVESCORE_SECRET', false)

console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
if (process.env.DATABASE_URI) {
  try {
    const uri = process.env.DATABASE_URI
    if (uri.startsWith('mongodb://') || uri.startsWith('mongodb+srv://')) {
      addCheck('–§–æ—Ä–º–∞—Ç DATABASE_URI', true, '‚úì MongoDB URI –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')
    } else {
      addCheck(
        '–§–æ—Ä–º–∞—Ç DATABASE_URI',
        false,
        'URI –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å mongodb:// –∏–ª–∏ mongodb+srv://',
      )
    }
  } catch (error) {
    addCheck('–§–æ—Ä–º–∞—Ç DATABASE_URI', false, `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URI: ${error.message}`)
  }
} else {
  addCheck('DATABASE_URI', false, '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞')
}

console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:')
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(projectRoot, 'package.json'), 'utf8'))

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const criticalDeps = [
    '@payloadcms/db-mongodb',
    '@payloadcms/next',
    'payload',
    'next',
    'react',
    'react-dom',
  ]

  criticalDeps.forEach((dep) => {
    const exists = packageJson.dependencies && packageJson.dependencies[dep]
    addCheck(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`, !!exists, exists ? `‚úì ${exists}` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  })

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ PM2
  const pm2Scripts = ['pm2:start', 'pm2:stop', 'pm2:restart', 'pm2:logs']
  pm2Scripts.forEach((script) => {
    const exists = packageJson.scripts && packageJson.scripts[script]
    addCheck(`–°–∫—Ä–∏–ø—Ç: ${script}`, !!exists, exists ? '‚úì' : '–ù–µ –Ω–∞–π–¥–µ–Ω')
  })
} catch (error) {
  addCheck('–ß—Ç–µ–Ω–∏–µ package.json', false, `–û—à–∏–±–∫–∞: ${error.message}`)
}

console.log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
try {
  const ecosystemPath = path.join(projectRoot, 'ecosystem.config.js')
  if (fs.existsSync(ecosystemPath)) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    const content = fs.readFileSync(ecosystemPath, 'utf8')
    if (content.includes('football-platform') && content.includes('apps')) {
      addCheck('PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', true, '‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞')
    } else {
      addCheck('PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', false, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞')
    }
  } else {
    addCheck('PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', false, '–§–∞–π–ª ecosystem.config.js –Ω–µ –Ω–∞–π–¥–µ–Ω')
  }
} catch (error) {
  addCheck('PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', false, `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`)
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('\n' + '='.repeat(60))
console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò')
console.log('='.repeat(60))

checks.forEach((check) => {
  const status = check.status ? '‚úÖ' : '‚ùå'
  console.log(`${status} ${check.name}`)
  if (check.message && check.message !== '‚úì') {
    console.log(`   ${check.message}`)
  }
})

console.log('\n' + '='.repeat(60))

if (hasErrors) {
  console.log('‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê')
  console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.')
  console.log('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ .env')
  console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É: pnpm build')
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB')
  console.log('4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PM2: npm install -g pm2')
  process.exit(1)
} else {
  console.log('‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´')
  console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!')
  console.log('\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:')
  console.log('pnpm pm2:start')
  console.log('\n–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:')
  console.log('pnpm pm2:monit')
  process.exit(0)
}
