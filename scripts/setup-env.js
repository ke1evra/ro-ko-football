#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * 
 * –°–æ–∑–¥–∞—ë—Ç .env —Ñ–∞–π–ª –∏–∑ .env.example —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
 * –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —Ñ–ª–∞–≥–æ–≤.
 */

import fs from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { createInterface } from 'node:readline'
import crypto from 'node:crypto'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const projectRoot = path.resolve(__dirname, '..')

const envPath = path.join(projectRoot, '.env')
const envExamplePath = path.join(projectRoot, '.env.example')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2)
const isInteractive = args.includes('--interactive') || args.includes('-i')
const isForce = args.includes('--force') || args.includes('-f')

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
 */
function generateSecret(length = 32) {
  return crypto.randomBytes(length).toString('hex')
}

/**
 * –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
 */
function copyEnvFile() {
  if (!fs.existsSync(envExamplePath)) {
    console.error('‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    process.exit(1)
  }

  if (fs.existsSync(envPath) && !isForce) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∏–ª–∏ --interactive –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
    process.exit(0)
  }

  try {
    fs.copyFileSync(envExamplePath, envPath)
    console.log('‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example')
    console.log('üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:')
    console.log('   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URI')
    console.log('   - –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π PAYLOAD_SECRET')
    console.log('   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:', error.message)
    process.exit(1)
  }
}

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
 */
async function interactiveSetup() {
  if (!fs.existsSync(envExamplePath)) {
    console.error('‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    process.exit(1)
  }

  if (fs.existsSync(envPath) && !isForce) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.')
    process.exit(0)
  }

  console.log('üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è\n')

  const rl = createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  const question = (prompt) => new Promise((resolve) => rl.question(prompt, resolve))

  try {
    // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = fs.readFileSync(envExamplePath, 'utf8')
    let envContent = template

    console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n')

    // DATABASE_URI
    const dbUri = await question(
      'MongoDB URI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: mongodb://localhost:27017/payload): '
    )
    if (dbUri.trim()) {
      envContent = envContent.replace(
        'DATABASE_URI=mongodb://localhost:27017/payload',
        `DATABASE_URI=${dbUri.trim()}`
      )
    }

    // PAYLOAD_SECRET
    const useGeneratedSecret = await question(
      '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π PAYLOAD_SECRET? (y/N): '
    )
    if (useGeneratedSecret.toLowerCase() === 'y' || useGeneratedSecret.toLowerCase() === 'yes') {
      const newSecret = generateSecret()
      envContent = envContent.replace(
        'PAYLOAD_SECRET=your-secret-key-here',
        `PAYLOAD_SECRET=${newSecret}`
      )
      console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π PAYLOAD_SECRET')
    }

    // NODE_ENV
    const nodeEnv = await question(
      '–û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production) [development]: '
    )
    if (nodeEnv.trim()) {
      envContent = envContent.replace(
        'NODE_ENV=development',
        `NODE_ENV=${nodeEnv.trim()}`
      )
    }

    // APP_URL
    const appUrl = await question(
      'URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è [http://localhost:3001]: '
    )
    if (appUrl.trim()) {
      envContent = envContent.replace(
        'APP_URL=http://localhost:3001',
        `APP_URL=${appUrl.trim()}`
      )
    }

    console.log('\nüìß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):')

    // EMAIL_FROM
    const emailFrom = await question(
      'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è [noreply@yourdomain.com]: '
    )
    if (emailFrom.trim()) {
      envContent = envContent.replace(
        'EMAIL_FROM=noreply@yourdomain.com',
        `EMAIL_FROM=${emailFrom.trim()}`
      )
    }

    // RESEND_API_KEY
    const resendKey = await question(
      'Resend API –∫–ª—é—á (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): '
    )
    if (resendKey.trim()) {
      envContent = envContent.replace(
        'RESEND_API_KEY=re_xxxxxxxx',
        `RESEND_API_KEY=${resendKey.trim()}`
      )
    }

    console.log('\n‚öΩ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LiveScore API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):')

    // LIVESCORE_KEY
    const livescoreKey = await question(
      'LiveScore API –∫–ª—é—á (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): '
    )
    if (livescoreKey.trim()) {
      envContent = envContent.replace(
        'LIVESCORE_KEY=your-livescore-api-key-here',
        `LIVESCORE_KEY=${livescoreKey.trim()}`
      )
    }

    // LIVESCORE_SECRET
    const livescoreSecret = await question(
      'LiveScore API —Å–µ–∫—Ä–µ—Ç (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): '
    )
    if (livescoreSecret.trim()) {
      envContent = envContent.replace(
        'LIVESCORE_SECRET=your-livescore-api-secret-here',
        `LIVESCORE_SECRET=${livescoreSecret.trim()}`
      )
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(envPath, envContent)
    
    console.log('\n‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: pnpm dev')

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', error.message)
    process.exit(1)
  } finally {
    rl.close()
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
  console.log(`
üîß –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/setup-env.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --interactive, -i    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
  --force, -f          –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
  --help, -h           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/setup-env.js                    # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.example
  node scripts/setup-env.js --interactive      # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  node scripts/setup-env.js -i -f              # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é

–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ package.json:
  pnpm env:setup                               # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
  pnpm env:setup:interactive                   # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
`)
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async function main() {
  if (args.includes('--help') || args.includes('-h')) {
    showHelp()
    return
  }

  if (isInteractive) {
    await interactiveSetup()
  } else {
    copyEnvFile()
  }
}

main().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
  process.exit(1)
})