'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
// tabs —É–¥–∞–ª–µ–Ω—ã
import { Separator } from '@/components/ui/separator'
import {
  Calendar,
  Clock,
  MapPin,
  Trophy,
  Activity,
  BarChart3,
  Users,
  Target,
  AlertCircle,
} from 'lucide-react'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'
import { TeamLogo } from '@/components/TeamLogo'
import { CountryFlagImage } from '@/components/CountryFlagImage'
import PredictionModal from '@/components/predictions/PredictionModal'

interface MatchInfo {
  id: number
  home: { id?: number | string; name: string }
  away: { id?: number | string; name: string }
  competition?: { id: string; name: string }
  date?: string
  time?: string
  status?: string
  score?: string
}

interface MatchEvent {
  id: string
  minute: string
  type: string
  player: string
  team: string
  description?: string
}

interface MatchStats {
  [key: string]: {
    home: string | number
    away: string | number
  }
}

interface MatchEventsData {
  success: boolean
  data: {
    match: {
      id: string
      date: string
      time: string
      status: string
      location: string
      scores: {
        score: string
        ht_score: string
        ft_score: string
        et_score: string
        ps_score: string
      }
      home: { id: number; name: string }
      away: { id: number; name: string }
      competition: { id: string; name: string }
    }
    event: Array<{
      id: number
      player: { id: number; name: string }
      time: number
      event: string
      sort: number
      info: any
      is_home: boolean
      is_away: boolean
      label: string
    }>
  }
}

interface MatchStatsData {
  success: boolean
  data: {
    [key: string]: string // –§–æ—Ä–º–∞—Ç "home_value:away_value"
  }
}

interface MatchPageClientProps {
  matchId: number
  initialMatchInfo: MatchInfo
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π
const getEventIcon = (type: string) => {
  switch (type.toLowerCase()) {
    case 'goal':
    case 'penalty':
      return '‚öΩ'
    case 'yellow_card':
      return 'üü®'
    case 'red_card':
      return 'üü•'
    case 'substitution':
    case 'substitution_in':
    case 'substitution_out':
      return 'üîÑ'
    case 'corner':
      return 'üìê'
    case 'offside':
      return 'üö©'
    case 'goal_penalty':
      return '‚öΩ'
    case 'missed_penalty':
      return '‚ùå'
    default:
      return 'üìù'
  }
}

const getEventColor = (type: string) => {
  switch (type.toLowerCase()) {
    case 'goal':
    case 'penalty':
    case 'goal_penalty':
      return 'text-green-600'
    case 'yellow_card':
      return 'text-yellow-600'
    case 'red_card':
      return 'text-red-600'
    case 'substitution':
    case 'substitution_in':
    case 'substitution_out':
      return 'text-blue-600'
    case 'missed_penalty':
      return 'text-red-600'
    default:
      return 'text-muted-foreground'
  }
}

// –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (RU)
const getEventLabel = (type: string): string => {
  const t = String(type || '').toLowerCase()
  const map: Record<string, string> = {
    goal: '–ì–æ–ª',
    penalty: '–ü–µ–Ω–∞–ª—å—Ç–∏',
    goal_penalty: '–ì–æ–ª (–ø–µ–Ω–∞–ª—å—Ç–∏)',
    missed_penalty: '–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ–Ω–∞–ª—å—Ç–∏',
    yellow_card: '–ñ—ë–ª—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞',
    red_card: '–ö—Ä–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞',
    substitution: '–ó–∞–º–µ–Ω–∞',
    substitution_in: '–í—ã—Ö–æ–¥ –Ω–∞ –∑–∞–º–µ–Ω—É',
    substitution_out: '–°–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞',
    corner: '–£–≥–ª–æ–≤–æ–π',
    offside: '–û—Ñ—Å–∞–π–¥',
    var: 'VAR',
  }
  return map[t] || t.replace(/_/g, ' ').replace(/^\w/, (c) => c.toUpperCase())
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const getStatsLabel = (key: string): string => {
  const statsLabels: Record<string, string> = {
    // –ë–∞–∑–æ–≤—ã–µ
    possession: '–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º',
    possesion: '–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º',
    shots_total: '–í—Å–µ–≥–æ —É–¥–∞—Ä–æ–≤',
    shots_on_target: '–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä',
    shots_off_target: '–£–¥–∞—Ä—ã –º–∏–º–æ',
    shots_blocked: '–£–¥–∞—Ä–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
    goals: '–ì–æ–ª—ã',
    corners: '–£–≥–ª–æ–≤—ã–µ',
    offsides: '–û—Ñ—Å–∞–π–¥—ã',
    throw_ins: '–í–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è',
    free_kicks: '–®—Ç—Ä–∞—Ñ–Ω—ã–µ',
    passes: '–ü–µ—Ä–µ–¥–∞—á–∏',
    long_passes: '–î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏',
    final_third_passes: '–ü–µ—Ä–µ–¥–∞—á–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ—Ç–∏',
    crosses: '–ù–∞–≤–µ—Å—ã',
    fouls: '–§–æ–ª—ã',
    fauls: '–§–æ–ª—ã',
    tackles: '–û—Ç–±–æ—Ä—ã',
    duels_won: '–í—ã–∏–≥—Ä–∞–Ω–æ –¥—É—ç–ª–µ–π',
    clearances: '–í—ã–Ω–æ—Å—ã',
    interceptions: '–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã',
    yellow_cards: '–ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏',
    red_cards: '–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏',
    saves: '–°—ç–π–≤—ã –≤—Ä–∞—Ç–∞—Ä—è',

    // xG –º–µ—Ç—Ä–∏–∫–∏
    xg: '–û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã (xG)',
    xa: '–û–∂–∏–¥–∞–µ–º—ã–µ –∞—Å—Å–∏—Å—Ç—ã (xA)',
    xgot: 'xG –≤ —Å—Ç–≤–æ—Ä (xGOT)',
    xgot_after_shots_on_target: 'xGOT –ø–æ—Å–ª–µ —É–¥–∞—Ä–æ–≤ –≤ —Å—Ç–≤–æ—Ä',
    goals_prevented: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –≥–æ–ª—ã',

    // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —É–¥–∞—Ä—ã –∏ –º–æ–º–µ–Ω—Ç—ã
    big_chances: '–ì–æ–ª–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã',
    shots_inside_box: '–£–¥–∞—Ä—ã –∏–∑ –ø—Ä–µ–¥–µ–ª–æ–≤ —à—Ç—Ä–∞—Ñ–Ω–æ–π',
    shots_outside_box: '–£–¥–∞—Ä—ã –∏–∑-–∑–∞ —à—Ç—Ä–∞—Ñ–Ω–æ–π',
    hit_woodwork: '–ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —à—Ç–∞–Ω–≥—É',

    // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –º—è—á–æ–º
    touches_in_opposition_box: '–ö–∞—Å–∞–Ω–∏—è –º—è—á–∞ –≤ —à—Ç—Ä–∞—Ñ–Ω–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫–∞',
    successful_through_balls: '–£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–µ–∑',

    // –ü—Ä–æ—á–µ–µ –∏–∑ API
    substitutions: '–ó–∞–º–µ–Ω—ã',
    goal_kicks: '–£–¥–∞—Ä—ã –æ—Ç –≤–æ—Ä–æ—Ç',
    attempts_on_goal: '–ü–æ–ø—ã—Ç–∫–∏ –Ω–∞ –≤–æ—Ä–æ—Ç–∞',
    treatments: '–õ–µ—á–µ–Ω–∏—è',
    penalties: '–ü–µ–Ω–∞–ª—å—Ç–∏',
    dangerous_attacks: '–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏',
    attacks: '–ê—Ç–∞–∫–∏',
    // –û—à–∏–±–∫–∏
    errors_leading_to_shot: '–û—à–∏–±–∫–∏, –ø—Ä–∏–≤–µ–¥—à–∏–µ –∫ —É–¥–∞—Ä—É',
    errors_leading_to_goal: '–û—à–∏–±–∫–∏, –ø—Ä–∏–≤–µ–¥—à–∏–µ –∫ –≥–æ–ª—É',
  }

  return statsLabels[key] || key.replace(/_/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase())
}

// –ö–∞—Ä—Ç–∞ –∞–ª–∏–∞—Å–æ–≤ –∏ –ø–æ—Ä—è–¥–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const ORDERED_STATS_KEYS: string[] = [
  // –°–≤–æ–¥–∫–∞
  'xg',
  'possession',
  'shots_total',
  'shots_on_target',
  'big_chances',
  'corners',
  'passes',
  'yellow_cards',
  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
  'xgot',
  'shots_off_target',
  'shots_blocked',
  'shots_inside_box',
  'shots_outside_box',
  'hit_woodwork',
  'goals',
  'big_chances',
  'corners',
  'touches_in_opposition_box',
  'successful_through_balls',
  'offsides',
  'free_kicks',
  'passes',
  'long_passes',
  'final_third_passes',
  'crosses',
  'xa',
  'throw_ins',
  'fouls',
  'tackles',
  'duels_won',
  'clearances',
  'interceptions',
  'errors_leading_to_shot',
  'errors_leading_to_goal',
  'saves',
  'xgot_after_shots_on_target',
  'goals_prevented',
]

const STAT_ALIASES: Record<string, string[]> = {
  xg: ['xg', 'expected_goals', 'exp_goals'],
  xa: ['xa', 'expected_assists', 'exp_assists'],
  xgot: ['xgot', 'xg_on_target', 'post_shot_xg', 'psxg'],
  xgot_after_shots_on_target: ['xgot_after_shots_on_target', 'psxg_on_target'],
  goals_prevented: ['goals_prevented', 'prevented_goals'],

  possession: ['possession', 'possesion', 'ball_possession', 'possession_percent'],
  shots_total: ['shots_total', 'shots', 'total_shots', 'attempts_on_goal', 'shots_total_attempts'],
  shots_on_target: ['shots_on_target', 'on_target', 'shots_ongoal'],
  shots_off_target: ['shots_off_target', 'off_target'],
  shots_blocked: ['shots_blocked', 'blocked_shots'],
  shots_inside_box: ['shots_insidebox', 'shots_inside_box', 'shots_in_box'],
  shots_outside_box: ['shots_outsidebox', 'shots_outside_box', 'shots_out_box'],
  hit_woodwork: ['hit_woodwork', 'woodwork', 'hit_post'],
  goals: ['goals', 'goals_scored', 'scored', 'goals_for'],
  big_chances: ['big_chances', 'goal_chances', 'big_scoring_chances'],
  corners: ['corners', 'corner_kicks'],
  passes: ['passes', 'total_passes', 'passes_total'],
  yellow_cards: ['yellow_cards'],
  offsides: ['offsides', 'offside'],
  throw_ins: ['throw_ins', 'throw_in'],
  free_kicks: ['free_kicks', 'freekicks'],
  long_passes: ['long_passes', 'long_balls'],
  final_third_passes: ['passes_in_final_third', 'final_third_passes', 'passes_third'],
  crosses: ['crosses'],
  fouls: ['fouls', 'fauls'],
  tackles: ['tackles'],
  duels_won: ['duels_won', 'won_duels'],
  clearances: ['clearances'],
  interceptions: ['interceptions'],
  errors_leading_to_shot: ['errors_leading_to_shot'],
  errors_leading_to_goal: ['errors_leading_to_goal'],
  saves: ['saves', 'goalkeeper_saves'],
}

function normalizeKey(key: string): string {
  return String(key)
    .toLowerCase()
    .replace(/\s+/g, '_')
    .replace(/[^a-z0-9_]/g, '_')
    .replace(/__+/g, '_')
    .replace(/^_+|_+$/g, '')
}

function resolveOrderedStats(
  stats: MatchStats,
): Array<{ key: string; stat: { home: string | number; away: string | number } }> {
  if (!stats || Object.keys(stats).length === 0) return []

  // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∫–ª—é—á–∞–º
  const normalized: Record<string, { home: string | number; away: string | number }> = {}
  for (const [k, v] of Object.entries(stats)) {
    normalized[normalizeKey(k)] = v
  }

  const getByCanon = (canon: string): { home: string | number; away: string | number } | null => {
    const aliases = STAT_ALIASES[canon] || [canon]
    for (const a of aliases) {
      const n = normalizeKey(a)
      if (normalized[n]) return normalized[n]
    }

    // –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞: –≤—Å–µ–≥–æ —É–¥–∞—Ä–æ–≤ = –≤ —Å—Ç–≤–æ—Ä + –º–∏–º–æ + –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
    if (canon === 'shots_total') {
      const on = getByCanon('shots_on_target')
      const off = getByCanon('shots_off_target')
      const bl = getByCanon('shots_blocked')
      if (on || off || bl) {
        const h =
          (parseFloat(String(on?.home ?? '0')) || 0) +
          (parseFloat(String(off?.home ?? '0')) || 0) +
          (parseFloat(String(bl?.home ?? '0')) || 0)
        const a =
          (parseFloat(String(on?.away ?? '0')) || 0) +
          (parseFloat(String(off?.away ?? '0')) || 0) +
          (parseFloat(String(bl?.away ?? '0')) || 0)
        if (h > 0 || a > 0) return { home: h, away: a }
      }
    }

    return null
  }

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
  const seen = new Set<string>()
  const result: Array<{ key: string; stat: { home: string | number; away: string | number } }> = []

  for (const key of ORDERED_STATS_KEYS) {
    if (seen.has(key)) continue
    const stat = getByCanon(key)
    if (stat) {
      seen.add(key)
      result.push({ key, stat })
    }
  }

  return result
}

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µÔøΩÔøΩ—Ç—ã —Å–æ–±—ã—Ç–∏–π
function CompactEventRow({
  event,
  homeName,
  awayName,
}: {
  event: MatchEvent
  homeName: string
  awayName: string
}) {
  const isHome = event.team === homeName
  return (
    <div className="flex items-center justify-between gap-2 py-1.5">
      <div className="flex items-center gap-2 min-w-0">
        <span className="inline-flex items-center justify-center rounded px-1.5 h-5 text-[10px] font-semibold bg-muted text-muted-foreground tabular-nums">
          {event.minute}
        </span>
        <span className="text-base leading-none">{getEventIcon(event.type)}</span>
        <span className={`truncate text-sm ${getEventColor(event.type)}`}>{event.player}</span>
      </div>
      <span className="text-[10px] text-muted-foreground whitespace-nowrap ml-2">
        {isHome ? homeName : awayName}
      </span>
    </div>
  )
}

function EventChip({ event, homeName }: { event: MatchEvent; homeName: string }) {
  const isHome = event.team === homeName
  return (
    <div
      className={`shrink-0 inline-flex items-center gap-1 rounded-full border px-2 py-1 text-[11px] ${isHome ? 'bg-blue-50 dark:bg-blue-950/20' : 'bg-red-50 dark:bg-red-950/20'}`}
    >
      <span className="tabular-nums font-mono font-semibold">{event.minute}</span>
      <span>{getEventIcon(event.type)}</span>
      <span className={`max-w-[140px] truncate ${getEventColor(event.type)}`}>{event.player}</span>
    </div>
  )
}

// –ü–∞—Ä—Å–∏—Ç –º–∏–Ω—É—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "45", "45+2", "90+3"
function parseMinuteValue(minute?: string): number {
  if (!minute) return 0
  const s = String(minute).trim()
  if (/^\d+(\.\d+)?$/.test(s)) return parseFloat(s)
  const parts = s.split('+')
  const base = parseFloat(parts[0] || '0')
  const extra = parseFloat(parts[1] || '0')
  const val = (Number.isFinite(base) ? base : 0) + (Number.isFinite(extra) ? extra : 0)
  return Math.min(Math.max(val, 0), 90)
}

// –ö–æ–ª—å—Ü–æ –º–∏–Ω—É—Ç—ã: –¥–≤–∞ –ø–æ–ª—É–æ–∫—Ä—É–∂—å—è (1-–π —Ç–∞–π–º —Å–ø—Ä–∞–≤–∞, 2-–π —Ç–∞–π–º —Å–ª–µ–≤–∞) —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
// –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ –ø–æ —Ç–∞–π–º–∞–º –∏ –æ–≤–µ—Ä—Ç–∞–π–º—É
function OvertimeMinuteRing({ minute }: { minute: number }) {
  const m = Math.max(0, minute)
  const strokeW = 4
  // –ø—Ä–æ–≥—Ä–µ—Å—Å 1-–≥–æ —Ç–∞–π–º–∞ (0..45)
  const p1 = Math.min(1, m / 45)
  // –ø—Ä–æ–≥—Ä–µ—Å—Å 2-–≥–æ —Ç–∞–π–º–∞ (46..90)
  const p2 = m <= 45 ? 0 : Math.min(1, (Math.min(m, 90) - 45) / 45)
  // –æ–≤–µ—Ä—Ç–∞–π–º (m>90): —Ä–∏—Å—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥–æ–ª—É–±—É—é –¥—É–≥—É –ø–æ–≤–µ—Ä—Ö
  const ot = m > 90 ? Math.min(1, (m - 90) / 15) : 0 // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 0..1 –¥–ª—è 15' –æ–≤–µ—Ä—Ç–∞–π–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ

  return (
    <div className="relative w-10 h-10">
      <svg viewBox="0 0 40 40" className="absolute inset-0">
        {/* —Ç—Ä–µ–∫–∏ */}
        <path
          d="M20 2 A 18 18 0 0 1 20 38"
          fill="none"
          stroke="currentColor"
          className="text-muted-foreground"
          strokeOpacity={0.25}
          strokeWidth={strokeW}
          strokeLinecap="round"
          pathLength={50}
        />
        <path
          d="M20 38 A 18 18 0 0 1 20 2"
          fill="none"
          stroke="currentColor"
          className="text-muted-foreground"
          strokeOpacity={0.25}
          strokeWidth={strokeW}
          strokeLinecap="round"
          pathLength={50}
        />

        {/* 1-–π —Ç–∞–π–º: –ø—Ä–∞–≤–∞—è –ø–æ–ª—É–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å, –æ—Ä–∞–Ω–∂–µ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
        <path
          d="M20 2 A 18 18 0 0 1 20 38"
          fill="none"
          stroke="currentColor"
          className="text-orange-500"
          strokeWidth={strokeW}
          strokeLinecap="round"
          pathLength={50}
          strokeDasharray={`${50 * p1} ${50}`}
          strokeDashoffset={0}
        />
        {/* 2-–π —Ç–∞–π–º: –ª–µ–≤–∞—è –ø–æ–ª—É–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å, –æ—Ä–∞–Ω–∂–µ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
        <path
          d="M20 38 A 18 18 0 0 1 20 2"
          fill="none"
          stroke="currentColor"
          className="text-orange-500"
          strokeWidth={strokeW}
          strokeLinecap="round"
          pathLength={50}
          strokeDasharray={`${50 * p2} ${50}`}
          strokeDashoffset={0}
        />

        {/* –û–≤–µ—Ä—Ç–∞–π–º: –ø–æ–≤–µ—Ä—Ö –ø–æ–ª–Ω—ã—Ö 90 —Ä–∏—Å—É–µ–º –≥–æ–ª—É–±—É—é –¥—É–≥—É –Ω–∞ –≤–µ—Ä—Ö—É—à–∫–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ */}
        {m > 90 && (
          <path
            d="M20 2 A 18 18 0 0 1 20 38"
            fill="none"
            stroke="currentColor"
            className="text-sky-500"
            strokeWidth={strokeW}
            strokeLinecap="round"
            pathLength={50}
            strokeDasharray={`${50 * Math.min(1, p1)} ${50}`}
            strokeDashoffset={0}
          />
        )}
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-xs font-bold text-primary tabular-nums">{m}</span>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function StatsItem({
  label,
  homeValue,
  awayValue,
}: {
  label: string
  homeValue: string | number
  awayValue: string | number
}) {
  const homeNum = typeof homeValue === 'number' ? homeValue : parseFloat(String(homeValue)) || 0
  const awayNum = typeof awayValue === 'number' ? awayValue : parseFloat(String(awayValue)) || 0
  const total = homeNum + awayNum

  const homePercent = total > 0 ? (homeNum / total) * 100 : 50
  const awayPercent = total > 0 ? (awayNum / total) * 100 : 50

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between text-sm">
        <span className="font-medium">{homeValue}</span>
        <span className="text-muted-foreground">{label}</span>
        <span className="font-medium">{awayValue}</span>
      </div>
      <div className="flex h-2 bg-muted rounded-full overflow-hidden">
        <div
          className="bg-blue-500 transition-all duration-300"
          style={{ width: `${homePercent}%` }}
        />
        <div
          className="bg-red-500 transition-all duration-300"
          style={{ width: `${awayPercent}%` }}
        />
      </div>
    </div>
  )
}

export default function MatchPageClient({ matchId, initialMatchInfo }: MatchPageClientProps) {
  const [eventsData, setEventsData] = useState<MatchEventsData | null>(null)
  const [statsData, setStatsData] = useState<MatchStatsData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isPredictionModalOpen, setIsPredictionModalOpen] = useState(false)
  // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–µ–Ω—Ç—É —Å–æ–±—ã—Ç–∏–π

  const fetchMatchData = async () => {
    setLoading(true)
    setError(null)

    try {
      console.log(`[MatchPageClient] Fetching data for match ${matchId}`)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [eventsResponse, statsResponse] = await Promise.allSettled([
        fetch(`/api/matches/events?match_id=${matchId}`),
        fetch(`/api/matches/stats?match_id=${matchId}`),
      ])

      let hasData = false

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
      if (eventsResponse.status === 'fulfilled' && eventsResponse.value.ok) {
        const eventsJson = await eventsResponse.value.json()
        console.log('[MatchPageClient] Events response:', eventsJson)
        if (eventsJson.success) {
          setEventsData(eventsJson)
          hasData = true
        }
      } else {
        console.error('[MatchPageClient] Events request failed:', eventsResponse)
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (statsResponse.status === 'fulfilled' && statsResponse.value.ok) {
        const statsJson = await statsResponse.value.json()
        console.log('[MatchPageClient] Stats response:', statsJson)
        if (statsJson.success) {
          setStatsData(statsJson)
          hasData = true
        }
      } else {
        console.error('[MatchPageClient] Stats request failed:', statsResponse)
      }

      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
      if (!hasData) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞')
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞:', err)
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫ÔøΩÔøΩ –¥–∞–Ω–Ω—ã—Ö')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMatchData()
  }, [matchId])

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
  const matchInfo = eventsData?.data?.match || initialMatchInfo
  const statusStr = String(matchInfo.status || '').toUpperCase()
  const isScheduled =
    !statusStr || statusStr.includes('NOT') || statusStr === 'NS' || statusStr.includes('SCHEDULED')

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ API)
  const events = (() => {
    const raw: any[] = Array.isArray((eventsData as any)?.data?.events)
      ? ((eventsData as any).data.events as any[])
      : Array.isArray((eventsData as any)?.data?.event)
        ? ((eventsData as any).data.event as any[])
        : []

    return raw.map((ev: any) => {
      const playerName = ev?.player?.name ?? ev?.player_name ?? ev?.player ?? ''
      const minuteVal = ev?.time ?? ev?.minute ?? ''
      const typeVal = ev?.event ?? ev?.type ?? ev?.label ?? 'event'
      const isHome =
        typeof ev?.is_home === 'boolean'
          ? ev.is_home
          : ev?.team === 'home' || ev?.side === 'home' || ev?.isHome === true

      return {
        id: String(ev?.id ?? `${typeVal}-${minuteVal}-${playerName}`),
        minute: String(minuteVal),
        type: String(typeVal),
        player: String(playerName),
        team: isHome ? matchInfo.home?.name || '–î–æ–º–∞' : matchInfo.away?.name || '–ì–æ—Å—Ç–∏',
        description: ev?.label,
      }
    })
  })()

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const stats = (() => {
    if (!statsData?.data) return {}
    // Livescore API –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–Ω—É—Ç—Ä—å data.stats
    const raw: Record<string, unknown> = (statsData.data as any).stats || (statsData.data as any)
    return Object.entries(raw).reduce((acc, [key, value]) => {
      const pair = String(value)
      const [homeValue, awayValue] = pair.includes(':') ? pair.split(':') : ['0', '0']
      acc[key] = { home: homeValue || '0', away: awayValue || '0' }
      return acc
    }, {} as MatchStats)
  })()

  if (loading) {
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –®–∞–ø–∫–∞ –º–∞—Ç—á–∞ */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Activity className="h-6 w-6 text-primary" />
              <div>
                <h1 className="text-2xl font-bold">
                  {matchInfo.home.name} ‚Äî {matchInfo.away.name}
                </h1>
                {matchInfo.competition?.name && (
                  <p className="text-muted-foreground">{matchInfo.competition.name}</p>
                )}
              </div>
            </div>
            <div className="flex items-center gap-2">
              {(eventsData?.data?.match?.status || matchInfo.status) && (
                <Badge variant="secondary">
                  {eventsData?.data?.match?.status || matchInfo.status}
                </Badge>
              )}
              {isScheduled && (
                <Button variant="outline" size="sm" onClick={() => setIsPredictionModalOpen(true)}>
                  –ü—Ä–æ–≥–Ω–æ–∑
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 items-center gap-6">
            {/* –ö–æ–º–∞–Ω–¥–∞ –¥–æ–º–∞ */}
            <div className="flex items-center justify-center gap-3">
              <TeamLogo
                teamId={parseInt(String(matchInfo.home.id || '0'))}
                teamName={matchInfo.home.name}
                size="large"
              />
              <div className="text-center">
                <div className="font-semibold text-lg">{matchInfo.home.name}</div>
                <div className="text-sm text-muted-foreground">–î–æ–º–∞</div>
              </div>
            </div>

            {/* –°—á–µ—Ç */}
            <div className="text-center">
              {eventsData?.data?.match?.scores?.score ||
              ('score' in matchInfo ? matchInfo.score : null) ? (
                <div className="space-y-2">
                  <div className="text-4xl font-bold font-mono">
                    {eventsData?.data?.match?.scores?.score ||
                      ('score' in matchInfo ? matchInfo.score : '')}
                  </div>
                  {eventsData?.data?.match?.scores && (
                    <div className="text-xs text-muted-foreground space-y-1">
                      {eventsData.data.match.scores.ht_score && (
                        <div>–ü–µ—Ä–µ—Ä—ã–≤: {eventsData.data.match.scores.ht_score}</div>
                      )}
                      {eventsData.data.match.scores.ft_score &&
                        eventsData.data.match.scores.ft_score !==
                          eventsData.data.match.scores.score && (
                          <div>–û—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è: {eventsData.data.match.scores.ft_score}</div>
                        )}
                      {eventsData.data.match.scores.et_score && (
                        <div>–î–æ–ø. –≤—Ä–µ–º—è: {eventsData.data.match.scores.et_score}</div>
                      )}
                      {eventsData.data.match.scores.ps_score && (
                        <div>–ü–µ–Ω–∞–ª—å—Ç–∏: {eventsData.data.match.scores.ps_score}</div>
                      )}
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-2xl font-bold text-muted-foreground">vs</div>
              )}
              {(eventsData?.data?.match?.date || matchInfo.date) && (
                <div className="text-sm text-muted-foreground mt-2">
                  {format(
                    new Date(eventsData?.data?.match?.date || matchInfo.date!),
                    'd MMMM yyyy',
                    { locale: ru },
                  )}
                  {(eventsData?.data?.match?.time || matchInfo.time) &&
                    ` –≤ ${eventsData?.data?.match?.time || matchInfo.time}`}
                </div>
              )}
            </div>

            {/* –ö–æ–º–∞–Ω–¥–∞ –≥–æ—Å—Ç–µ–π */}
            <div className="flex items-center justify-center gap-3">
              <div className="text-center">
                <div className="font-semibold text-lg">{matchInfo.away.name}</div>
                <div className="text-sm text-muted-foreground">–í –≥–æ—Å—Ç—è—Ö</div>
              </div>
              <TeamLogo
                teamId={parseInt(String(matchInfo.away.id || '0'))}
                teamName={matchInfo.away.name}
                size="large"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ç—á–∞ */}
      {error ? (
        <Card>
          <CardContent className="text-center py-8 space-y-4">
            <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto" />
            <p className="text-muted-foreground">{error}</p>
            <Button onClick={fetchMatchData} variant="outline" size="sm">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div
          className={`relative grid gap-4 ${events && events.length > 0 ? 'grid-cols-1 lg:grid-cols-3' : 'grid-cols-1'}`}
        >
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Å–æ–±—ã—Ç–∏—è (2/3) ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è */}
          {events && events.length > 0 ? (
            <div className="lg:col-span-2 order-1">
              <Card className="sticky top-24">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2">
                      <Activity className="h-5 w-5" />
                      –°–æ–±—ã—Ç–∏—è –º–∞—Ç—á–∞
                    </CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {events
                      .sort((a, b) => parseInt(a.minute) - parseInt(b.minute))
                      .map((event, idx, arr) => {
                        const isHome = event.team === (matchInfo.home?.name || '–î–æ–º–∞')
                        const minuteNum = (() => {
                          const m = parseMinuteValue(event.minute)
                          // –µ—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç 90+2 ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ 92 –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                          return m
                        })()
                        const prevMinute = idx > 0 ? parseMinuteValue(arr[idx - 1].minute) : 0
                        const needHTLine = prevMinute < 45 && minuteNum >= 45
                        const needFTLine = prevMinute < 90 && minuteNum >= 90
                        const overtime = minuteNum > 90

                        return (
                          <div key={event.id} className="flex flex-col">
                            {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–∞–π–º–æ–≤ */}
                            {needHTLine && (
                              <div className="relative my-2">
                                <div className="h-px bg-muted" />
                                <div className="absolute -top-2 left-1/2 -translate-x-1/2 px-2 text-[10px] text-muted-foreground bg-background">
                                  2–π —Ç–∞–π–º
                                </div>
                              </div>
                            )}
                            {needFTLine && (
                              <div className="relative my-2">
                                <div className="h-px bg-muted" />
                                <div className="absolute -top-2 left-1/2 -translate-x-1/2 px-2 text-[10px] text-muted-foreground bg-background">
                                  –¥–æ–ø –≤—Ä–µ–º—è
                                </div>
                              </div>
                            )}

                            <div className="flex items-center">
                              {/* –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–¥–æ–º–∞—à–Ω–∏–µ) - –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥ */}
                              {isHome ? (
                                <div className="flex-1 pr-3">
                                  <div className="flex items-center gap-2 justify-end">
                                    <span
                                      className={`truncate text-sm ${getEventColor(event.type)}`}
                                    >
                                      {event.player}
                                    </span>
                                    <span className="text-base leading-none">
                                      {getEventIcon(event.type)}
                                    </span>
                                    <span className="font-semibold text-sm">
                                      {getEventLabel(event.type)}
                                    </span>
                                  </div>
                                </div>
                              ) : (
                                <div className="flex-1 pr-3" />
                              )}

                              {/* –ú–∏–Ω—É—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É: –∫–æ–ª—å—Ü–æ —Ç–∞–π–º–æ–≤/–æ–≤–µ—Ä—Ç–∞–π–º–∞ */}
                              <div className="flex-shrink-0 mx-1">
                                <OvertimeMinuteRing minute={minuteNum} />
                              </div>

                              {/* –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≥–æ—Å—Ç–∏) - –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥ */}
                              {!isHome ? (
                                <div className="flex-1 pl-3">
                                  <div className="flex items-center gap-2 justify-start">
                                    <span className="text-base leading-none">
                                      {getEventIcon(event.type)}
                                    </span>
                                    <span className="font-semibold text-sm">
                                      {getEventLabel(event.type)}
                                    </span>
                                    <span
                                      className={`truncate text-sm ${getEventColor(event.type)}`}
                                    >
                                      {event.player}
                                    </span>
                                  </div>
                                </div>
                              ) : (
                                <div className="flex-1 pl-3" />
                              )}
                            </div>
                          </div>
                        )
                      })}
                  </div>
                </CardContent>
              </Card>
            </div>
          ) : null}

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (1/3, –∞ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π ‚Äî –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É) */}
          <div
            className={`${events && events.length > 0 ? 'lg:col-span-1' : 'lg:col-span-3'} order-2`}
          >
            <Card className="sticky top-24">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                {stats && Object.keys(stats).length > 0 ? (
                  <div className="relative">
                    {/* –®–∞–ø–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥ */}
                    <div className="mb-2">
                      <div className="grid grid-cols-3 items-center">
                        <div className="text-xs text-left truncate pr-2">
                          {matchInfo.home?.name || '–î–æ–º–∞'}
                        </div>
                        <div className="text-xs text-center text-muted-foreground">–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</div>
                        <div className="text-xs text-right truncate pl-2">
                          {matchInfo.away?.name || '–ì–æ—Å—Ç–∏'}
                        </div>
                      </div>
                    </div>

                    {/* –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
                    <div className="max-h-[70vh] overflow-auto pr-1">
                      <div className="space-y-6">
                        {(() => {
                          const ordered = resolveOrderedStats(stats)
                          if (ordered.length === 0) {
                            return (
                              <div className="text-center py-8 text-muted-foreground">
                                <BarChart3 className="h-12 w-12 mx-auto mb-2 opacity-50" />
                                <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
                              </div>
                            )
                          }
                          return ordered
                            .filter(({ stat }) => {
                              const hv = Number(String(stat.home).replace('%', ''))
                              const av = Number(String(stat.away).replace('%', ''))
                              const hvOk = Number.isFinite(hv)
                              const avOk = Number.isFinite(av)
                              if (!hvOk && !avOk) return false
                              return (hvOk ? hv : 0) !== 0 || (avOk ? av : 0) !== 0
                            })
                            .map(({ key, stat }) => (
                              <StatsItem
                                key={key}
                                label={getStatsLabel(key)}
                                homeValue={stat.home}
                                awayValue={stat.away}
                              />
                            ))
                        })()}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    <BarChart3 className="h-12 w-12 mx-auto mb-2 opacity-50" />
                    <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–πÔøΩÔøΩ–µ–Ω–∞</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      )}
      {isScheduled && (
        <PredictionModal
          isOpen={isPredictionModalOpen}
          onClose={() => setIsPredictionModalOpen(false)}
          matchId={matchId}
          matchData={{
            home: { name: matchInfo.home.name },
            away: { name: matchInfo.away.name },
            competition: matchInfo.competition,
            date: matchInfo.date || '',
            time: matchInfo.time || '',
          }}
        />
      )}
    </div>
  )
}
