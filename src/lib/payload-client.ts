import { getPayload } from 'payload'
import config from '@/payload.config'

let cachedPayload: any = null

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Payload –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function getPayloadClient() {
  if (cachedPayload) {
    return cachedPayload
  }

  try {
    cachedPayload = await getPayload({ config })
    return cachedPayload
  } catch (error) {
    console.error('[getPayloadClient] Error initializing Payload:', error)
    throw error
  }
}

/**
 * –ò—â–µ—Ç –º–∞—Ç—á –ø–æ matchId —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Payload
 */
export async function findMatchByMatchId(matchId: number) {
  console.log(`[findMatchByMatchId] –ü–æ–∏—Å–∫ –º–∞—Ç—á–∞ matchId=${matchId} —á–µ—Ä–µ–∑ Payload –∫–ª–∏–µ–Ω—Ç`)

  try {
    const payload = await getPayloadClient()

    const result = await payload.find({
      collection: 'matches',
      where: {
        matchId: {
          equals: matchId,
        },
      },
      limit: 1,
    })

    console.log(`[findMatchByMatchId] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:`, {
      totalDocs: result.totalDocs,
      docsCount: result.docs.length,
    })

    if (result.docs.length > 0) {
      const match = result.docs[0]
      console.log(`[findMatchByMatchId] ‚úì –ù–∞–π–¥–µ–Ω –º–∞—Ç—á:`, {
        payloadId: match.id,
        matchId: match.matchId,
        homeTeam: match.homeTeam,
        awayTeam: match.awayTeam,
        date: match.date,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
      if (match.matchId === matchId) {
        return match
      } else {
        console.error(
          `[findMatchByMatchId] üö® –ù–∞–π–¥–µ–Ω –º–∞—Ç—á —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º matchId: ${match.matchId} –≤–º–µ—Å—Ç–æ ${matchId}`,
        )
        return null
      }
    }

    console.log(`[findMatchByMatchId] ‚úó –ú–∞—Ç—á —Å matchId=${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return null
  } catch (error) {
    console.error('[findMatchByMatchId] Error:', error)
    return null
  }
}

/**
 * –ò—â–µ—Ç –º–∞—Ç—á –ø–æ –¥–∞—Ç–µ –∏ ID –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Payload
 */
export async function findMatchByTeamsAndDate(
  homeTeamId: number,
  awayTeamId: number,
  date: string,
) {
  console.log(`[findMatchByTeamsAndDate] –ü–æ–∏—Å–∫ –º–∞—Ç—á–∞ —á–µ—Ä–µ–∑ Payload –∫–ª–∏–µ–Ω—Ç:`, {
    homeTeamId,
    awayTeamId,
    date,
  })

  try {
    const payload = await getPayloadClient()

    const result = await payload.find({
      collection: 'matches',
      where: {
        and: [
          {
            date: {
              equals: new Date(date).toISOString(),
            },
          },
          {
            homeTeamId: {
              equals: homeTeamId,
            },
          },
          {
            awayTeamId: {
              equals: awayTeamId,
            },
          },
        ],
      },
      limit: 1,
    })

    console.log(`[findMatchByTeamsAndDate] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:`, {
      totalDocs: result.totalDocs,
      docsCount: result.docs.length,
    })

    if (result.docs.length > 0) {
      const match = result.docs[0]
      console.log(`[findMatchByTeamsAndDate] ‚úì –ù–∞–π–¥–µ–Ω –º–∞—Ç—á:`, {
        payloadId: match.id,
        matchId: match.matchId,
        homeTeam: match.homeTeam,
        awayTeam: match.awayTeam,
        date: match.date,
      })
      return match
    }

    console.log(`[findMatchByTeamsAndDate] ‚úó –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return null
  } catch (error) {
    console.error('[findMatchByTeamsAndDate] Error:', error)
    return null
  }
}
