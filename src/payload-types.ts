/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    posts: Post;
    comments: Comment;
    commentVotes: CommentVote;
    leagues: League;
    matches: Match;
    matchStats: MatchStat;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    commentVotes: CommentVotesSelect<false> | CommentVotesSelect<true>;
    leagues: LeaguesSelect<false> | LeaguesSelect<true>;
    matches: MatchesSelect<false> | MatchesSelect<true>;
    matchStats: MatchStatsSelect<false> | MatchStatsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    topMatchesLeagues: TopMatchesLeague;
    sidebarLeagues: SidebarLeague;
  };
  globalsSelect: {
    topMatchesLeagues: TopMatchesLeaguesSelect<false> | TopMatchesLeaguesSelect<true>;
    sidebarLeagues: SidebarLeaguesSelect<false> | SidebarLeaguesSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'admin' | 'user';
  /**
   * Уникальный идентификатор для публичного профиля
   */
  username?: string | null;
  name?: string | null;
  bio?: string | null;
  avatar?: (string | null) | Media;
  /**
   * Если нет загруженного медиа, можно указать внешний URL
   */
  avatarUrl?: string | null;
  links?: {
    website?: string | null;
    twitter?: string | null;
    github?: string | null;
  };
  /**
   * Редактирует только админ
   */
  rating?: number | null;
  /**
   * Has the user verified their email address
   */
  emailVerified?: boolean | null;
  emailVerificationToken?: string | null;
  emailVerificationExpires?: string | null;
  passwordResetToken?: string | null;
  passwordResetExpires?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  /**
   * Автогенерируется из заголовка при сохранении
   */
  slug?: string | null;
  postType: 'regular' | 'prediction';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  featuredImage?: (string | null) | Media;
  /**
   * ID матча из API для которого делается прогноз
   */
  matchId?: number | null;
  /**
   * ID фикстуры из API для которого делается прогноз
   */
  fixtureId?: number | null;
  prediction?: {
    /**
     * Прогноз исхода матча
     */
    outcome?: ('home' | 'draw' | 'away') | null;
    score?: {
      /**
       * Голы хозяев
       */
      home?: number | null;
      /**
       * Голы гостей
       */
      away?: number | null;
    };
    fouls?: {
      /**
       * Общее количество фолов
       */
      total?: number | null;
      overUnder?: ('over' | 'under') | null;
    };
    corners?: {
      /**
       * Общее количество угловых
       */
      total?: number | null;
      /**
       * Угловые хозяев
       */
      home?: number | null;
      /**
       * Угловые гостей
       */
      away?: number | null;
    };
    yellowCards?: {
      /**
       * Общее количество желтых карточек
       */
      total?: number | null;
      /**
       * Желтые карточки хозяев
       */
      home?: number | null;
      /**
       * Желтые карточки гостей
       */
      away?: number | null;
    };
    /**
     * Динамические события прогноза с коэффициентами
     */
    events?:
      | {
          /**
           * Название события (например, "П1", "ТБ 2.5", "УГ ТБ 8.5")
           */
          event: string;
          /**
           * Коэффициент на событие
           */
          coefficient: number;
          id?: string | null;
        }[]
      | null;
    /**
     * Информация о матче на момент создания прогноза
     */
    matchInfo?: {
      /**
       * Название команды хозяев
       */
      home?: string | null;
      /**
       * Название команды гостей
       */
      away?: string | null;
      /**
       * Название турнира/лиги
       */
      competition?: string | null;
      /**
       * Дата матча
       */
      date?: string | null;
      /**
       * Время матча
       */
      time?: string | null;
    };
  };
  author: string | User;
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: string;
  post: string | Post;
  /**
   * Родительский комментарий (для ответов)
   */
  parent?: (string | null) | Comment;
  content: string;
  author: string | User;
  upvotes: number;
  downvotes: number;
  score: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commentVotes".
 */
export interface CommentVote {
  id: string;
  comment: string | Comment;
  user: string | User;
  /**
   * 1 — плюс, -1 — минус
   */
  value: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leagues".
 */
export interface League {
  id: string;
  /**
   * ID соревнования из внешнего API
   */
  competitionId: number;
  /**
   * Внешний идентификатор (если отличается от competitionId)
   */
  externalId?: string | null;
  /**
   * Оригинальное название лиги из API
   */
  name: string;
  /**
   * Пользовательское название лиги (переводы, сокращения и т.д.)
   */
  customName?: string | null;
  displayName?: string | null;
  /**
   * ID страны первого вхождения (если применимо)
   */
  countryId?: number | null;
  /**
   * Название страны (первое вхождение из списка стран)
   */
  countryName?: string | null;
  isLeague?: boolean | null;
  isCup?: boolean | null;
  /**
   * Дивизион (1 — высший)
   */
  tier?: number | null;
  hasGroups?: boolean | null;
  active?: boolean | null;
  /**
   * Только национальные сборные
   */
  nationalTeamsOnly?: boolean | null;
  /**
   * Страны, относящиеся к соревнованию
   */
  countries?:
    | {
        id: number;
        name: string;
      }[]
    | null;
  /**
   * Федерации, относящиеся к соревнованию
   */
  federations?:
    | {
        id: number;
        name: string;
      }[]
    | null;
  /**
   * Текущий сезон
   */
  season?: {
    id?: number | null;
    name?: string | null;
    start?: string | null;
    end?: string | null;
  };
  /**
   * Меньше — выше приоритет
   */
  priority?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "matches".
 */
export interface Match {
  id: string;
  /**
   * ID матча из внешнего API
   */
  matchId: number;
  /**
   * ID фикстуры из внешнего API (если отличается от matchId)
   */
  fixtureId?: number | null;
  /**
   * Дополнительный внешний идентификатор
   */
  externalId?: string | null;
  displayName?: string | null;
  /**
   * Дата матча (ISO-8601, UTC)
   */
  date: string;
  status: 'scheduled' | 'live' | 'halftime' | 'finished' | 'cancelled' | 'postponed' | 'suspended';
  /**
   * Минута матча (для live)
   */
  minute?: number | null;
  period?: ('not_started' | 'first_half' | 'halftime' | 'second_half' | 'extra_time' | 'penalties' | 'finished') | null;
  /**
   * Строка времени из API (например, FT)
   */
  time?: string | null;
  /**
   * Плановое время начала (например, 00:30)
   */
  scheduled?: string | null;
  /**
   * Время добавления матча в провайдере
   */
  addedAt?: string | null;
  /**
   * Время последнего изменения в провайдере
   */
  lastChangedAt?: string | null;
  /**
   * Название команды хозяев
   */
  homeTeam: string;
  /**
   * ID команды хозяев из API
   */
  homeTeamId?: number | null;
  /**
   * URL логотипа хозяев
   */
  homeLogo?: string | null;
  /**
   * Страна хозяев (ID)
   */
  homeCountryId?: number | null;
  /**
   * Стадион хозяев (из API)
   */
  homeStadium?: string | null;
  /**
   * Название команды гостей
   */
  awayTeam: string;
  /**
   * ID команды гостей из API
   */
  awayTeamId?: number | null;
  /**
   * URL логотипа гостей
   */
  awayLogo?: string | null;
  /**
   * Страна гостей (ID)
   */
  awayCountryId?: number | null;
  /**
   * Стадион гостей (из API)
   */
  awayStadium?: string | null;
  /**
   * Голы хозяев
   */
  homeScore?: number | null;
  /**
   * Голы гостей
   */
  awayScore?: number | null;
  /**
   * Голы хозяев к перерыву
   */
  homeScoreHalftime?: number | null;
  /**
   * Голы гостей к перерыву
   */
  awayScoreHalftime?: number | null;
  /**
   * Голы хозяев в доп. время
   */
  homeScoreExtraTime?: number | null;
  /**
   * Голы гостей в доп. время
   */
  awayScoreExtraTime?: number | null;
  /**
   * Голы хозяев в серии пенальти
   */
  homeScorePenalties?: number | null;
  /**
   * Голы гостей в серии пенальти
   */
  awayScorePenalties?: number | null;
  /**
   * Исходные строковые значения счёта из API
   */
  scoresRaw?: {
    score?: string | null;
    htScore?: string | null;
    ftScore?: string | null;
    etScore?: string | null;
    psScore?: string | null;
  };
  /**
   * Название соревнования
   */
  competition?: string | null;
  /**
   * ID соревнования из API
   */
  competitionId?: number | null;
  /**
   * Доп. детали соревнования из API
   */
  competitionDetails?: {
    isCup?: boolean | null;
    isLeague?: boolean | null;
    hasGroups?: boolean | null;
    nationalTeamsOnly?: boolean | null;
    active?: boolean | null;
    tier?: number | null;
  };
  /**
   * Федерация (если есть)
   */
  federation?: {
    federationId?: number | null;
    name?: string | null;
  };
  /**
   * Страна матча (если есть)
   */
  country?: {
    countryId?: number | null;
    name?: string | null;
    flag?: string | null;
    fifaCode?: string | null;
    uefaCode?: string | null;
    isReal?: boolean | null;
  };
  /**
   * Группа/подгруппа (если есть)
   */
  groupId?: number | null;
  /**
   * Связь с лигой из нашей базы
   */
  league?: (string | null) | League;
  /**
   * Информация о сезоне
   */
  season?: {
    seasonId?: number | null;
    name?: string | null;
    year?: string | null;
  };
  /**
   * Тур/раунд соревнования
   */
  round?: string | null;
  /**
   * Локация из API (строка)
   */
  location?: string | null;
  /**
   * Информация о стадионе
   */
  venue?: {
    name?: string | null;
    city?: string | null;
    country?: string | null;
  };
  /**
   * Главный судья
   */
  referee?: string | null;
  /**
   * Исходы из API (строки: 1/X/2)
   */
  outcomes?: {
    halfTime?: string | null;
    fullTime?: string | null;
    extraTime?: string | null;
    penaltyShootout?: string | null;
  };
  /**
   * Коэффициенты
   */
  odds?: {
    pre?: {
      home?: number | null;
      draw?: number | null;
      away?: number | null;
    };
    live?: {
      home?: number | null;
      draw?: number | null;
      away?: number | null;
    };
  };
  /**
   * Ссылки на события/статистику/составы/Н2Н
   */
  urls?: {
    events?: string | null;
    statistics?: string | null;
    lineups?: string | null;
    head2head?: string | null;
  };
  /**
   * Время последней синхронизации
   */
  lastSyncAt?: string | null;
  /**
   * Источник данных
   */
  syncSource?: ('history' | 'live' | 'fixtures' | 'manual') | null;
  /**
   * Есть ли статистика матча
   */
  hasStats?: boolean | null;
  /**
   * Приоритет матча (меньше = выше)
   */
  priority?: number | null;
  /**
   * Оригинальный объект матча из API
   */
  raw?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "matchStats".
 */
export interface MatchStat {
  id: string;
  /**
   * ID матча из внешнего API
   */
  matchId: number;
  /**
   * Связь с матчем
   */
  match: string | Match;
  displayName?: string | null;
  /**
   * Владение мячом (%)
   */
  possession?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Удары
   */
  shots?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Удары в створ
   */
  shotsOnTarget?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Удары мимо створа
   */
  shotsOffTarget?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Заблокирован��ые удары
   */
  shotsBlocked?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Угловые
   */
  corners?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Офсайды
   */
  offsides?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Фолы
   */
  fouls?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Жёлтые карточки
   */
  yellowCards?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Красные карточки
   */
  redCards?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * ��ейвы вратарей
   */
  saves?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Передачи
   */
  passes?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Точные передачи
   */
  passesAccurate?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Точность передач (%)
   */
  passAccuracy?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Атаки
   */
  attacks?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Опасные атаки
   */
  dangerousAttacks?: {
    home?: number | null;
    away?: number | null;
  };
  /**
   * Оригинальный ответ API статистики
   */
  additionalStats?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * События матча (голы, карточки, замены)
   */
  events?:
    | {
        minute: number;
        type: 'goal' | 'own_goal' | 'penalty' | 'yellow_card' | 'red_card' | 'substitution' | 'var' | 'other';
        team: 'home' | 'away';
        player?: string | null;
        assistPlayer?: string | null;
        playerOut?: string | null;
        playerIn?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Составы команд
   */
  lineups?: {
    home?: {
      formation?: string | null;
      startingXI?:
        | {
            number?: number | null;
            name: string;
            position?: string | null;
            id?: string | null;
          }[]
        | null;
      substitutes?:
        | {
            number?: number | null;
            name: string;
            position?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    away?: {
      formation?: string | null;
      startingXI?:
        | {
            number?: number | null;
            name: string;
            position?: string | null;
            id?: string | null;
          }[]
        | null;
      substitutes?:
        | {
            number?: number | null;
            name: string;
            position?: string | null;
            id?: string | null;
          }[]
        | null;
    };
  };
  /**
   * Время последней синхронизации
   */
  lastSyncAt?: string | null;
  /**
   * Источник данных
   */
  syncSource?: ('stats' | 'events' | 'lineups' | 'manual') | null;
  /**
   * Качество данных
   */
  dataQuality?: ('complete' | 'partial' | 'minimal' | 'none') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comment;
      } | null)
    | ({
        relationTo: 'commentVotes';
        value: string | CommentVote;
      } | null)
    | ({
        relationTo: 'leagues';
        value: string | League;
      } | null)
    | ({
        relationTo: 'matches';
        value: string | Match;
      } | null)
    | ({
        relationTo: 'matchStats';
        value: string | MatchStat;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  username?: T;
  name?: T;
  bio?: T;
  avatar?: T;
  avatarUrl?: T;
  links?:
    | T
    | {
        website?: T;
        twitter?: T;
        github?: T;
      };
  rating?: T;
  emailVerified?: T;
  emailVerificationToken?: T;
  emailVerificationExpires?: T;
  passwordResetToken?: T;
  passwordResetExpires?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  postType?: T;
  content?: T;
  featuredImage?: T;
  matchId?: T;
  fixtureId?: T;
  prediction?:
    | T
    | {
        outcome?: T;
        score?:
          | T
          | {
              home?: T;
              away?: T;
            };
        fouls?:
          | T
          | {
              total?: T;
              overUnder?: T;
            };
        corners?:
          | T
          | {
              total?: T;
              home?: T;
              away?: T;
            };
        yellowCards?:
          | T
          | {
              total?: T;
              home?: T;
              away?: T;
            };
        events?:
          | T
          | {
              event?: T;
              coefficient?: T;
              id?: T;
            };
        matchInfo?:
          | T
          | {
              home?: T;
              away?: T;
              competition?: T;
              date?: T;
              time?: T;
            };
      };
  author?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  post?: T;
  parent?: T;
  content?: T;
  author?: T;
  upvotes?: T;
  downvotes?: T;
  score?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commentVotes_select".
 */
export interface CommentVotesSelect<T extends boolean = true> {
  comment?: T;
  user?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leagues_select".
 */
export interface LeaguesSelect<T extends boolean = true> {
  competitionId?: T;
  externalId?: T;
  name?: T;
  customName?: T;
  displayName?: T;
  countryId?: T;
  countryName?: T;
  isLeague?: T;
  isCup?: T;
  tier?: T;
  hasGroups?: T;
  active?: T;
  nationalTeamsOnly?: T;
  countries?:
    | T
    | {
        id?: T;
        name?: T;
      };
  federations?:
    | T
    | {
        id?: T;
        name?: T;
      };
  season?:
    | T
    | {
        id?: T;
        name?: T;
        start?: T;
        end?: T;
      };
  priority?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "matches_select".
 */
export interface MatchesSelect<T extends boolean = true> {
  matchId?: T;
  fixtureId?: T;
  externalId?: T;
  displayName?: T;
  date?: T;
  status?: T;
  minute?: T;
  period?: T;
  time?: T;
  scheduled?: T;
  addedAt?: T;
  lastChangedAt?: T;
  homeTeam?: T;
  homeTeamId?: T;
  homeLogo?: T;
  homeCountryId?: T;
  homeStadium?: T;
  awayTeam?: T;
  awayTeamId?: T;
  awayLogo?: T;
  awayCountryId?: T;
  awayStadium?: T;
  homeScore?: T;
  awayScore?: T;
  homeScoreHalftime?: T;
  awayScoreHalftime?: T;
  homeScoreExtraTime?: T;
  awayScoreExtraTime?: T;
  homeScorePenalties?: T;
  awayScorePenalties?: T;
  scoresRaw?:
    | T
    | {
        score?: T;
        htScore?: T;
        ftScore?: T;
        etScore?: T;
        psScore?: T;
      };
  competition?: T;
  competitionId?: T;
  competitionDetails?:
    | T
    | {
        isCup?: T;
        isLeague?: T;
        hasGroups?: T;
        nationalTeamsOnly?: T;
        active?: T;
        tier?: T;
      };
  federation?:
    | T
    | {
        federationId?: T;
        name?: T;
      };
  country?:
    | T
    | {
        countryId?: T;
        name?: T;
        flag?: T;
        fifaCode?: T;
        uefaCode?: T;
        isReal?: T;
      };
  groupId?: T;
  league?: T;
  season?:
    | T
    | {
        seasonId?: T;
        name?: T;
        year?: T;
      };
  round?: T;
  location?: T;
  venue?:
    | T
    | {
        name?: T;
        city?: T;
        country?: T;
      };
  referee?: T;
  outcomes?:
    | T
    | {
        halfTime?: T;
        fullTime?: T;
        extraTime?: T;
        penaltyShootout?: T;
      };
  odds?:
    | T
    | {
        pre?:
          | T
          | {
              home?: T;
              draw?: T;
              away?: T;
            };
        live?:
          | T
          | {
              home?: T;
              draw?: T;
              away?: T;
            };
      };
  urls?:
    | T
    | {
        events?: T;
        statistics?: T;
        lineups?: T;
        head2head?: T;
      };
  lastSyncAt?: T;
  syncSource?: T;
  hasStats?: T;
  priority?: T;
  raw?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "matchStats_select".
 */
export interface MatchStatsSelect<T extends boolean = true> {
  matchId?: T;
  match?: T;
  displayName?: T;
  possession?:
    | T
    | {
        home?: T;
        away?: T;
      };
  shots?:
    | T
    | {
        home?: T;
        away?: T;
      };
  shotsOnTarget?:
    | T
    | {
        home?: T;
        away?: T;
      };
  shotsOffTarget?:
    | T
    | {
        home?: T;
        away?: T;
      };
  shotsBlocked?:
    | T
    | {
        home?: T;
        away?: T;
      };
  corners?:
    | T
    | {
        home?: T;
        away?: T;
      };
  offsides?:
    | T
    | {
        home?: T;
        away?: T;
      };
  fouls?:
    | T
    | {
        home?: T;
        away?: T;
      };
  yellowCards?:
    | T
    | {
        home?: T;
        away?: T;
      };
  redCards?:
    | T
    | {
        home?: T;
        away?: T;
      };
  saves?:
    | T
    | {
        home?: T;
        away?: T;
      };
  passes?:
    | T
    | {
        home?: T;
        away?: T;
      };
  passesAccurate?:
    | T
    | {
        home?: T;
        away?: T;
      };
  passAccuracy?:
    | T
    | {
        home?: T;
        away?: T;
      };
  attacks?:
    | T
    | {
        home?: T;
        away?: T;
      };
  dangerousAttacks?:
    | T
    | {
        home?: T;
        away?: T;
      };
  additionalStats?: T;
  events?:
    | T
    | {
        minute?: T;
        type?: T;
        team?: T;
        player?: T;
        assistPlayer?: T;
        playerOut?: T;
        playerIn?: T;
        description?: T;
        id?: T;
      };
  lineups?:
    | T
    | {
        home?:
          | T
          | {
              formation?: T;
              startingXI?:
                | T
                | {
                    number?: T;
                    name?: T;
                    position?: T;
                    id?: T;
                  };
              substitutes?:
                | T
                | {
                    number?: T;
                    name?: T;
                    position?: T;
                    id?: T;
                  };
            };
        away?:
          | T
          | {
              formation?: T;
              startingXI?:
                | T
                | {
                    number?: T;
                    name?: T;
                    position?: T;
                    id?: T;
                  };
              substitutes?:
                | T
                | {
                    number?: T;
                    name?: T;
                    position?: T;
                    id?: T;
                  };
            };
      };
  lastSyncAt?: T;
  syncSource?: T;
  dataQuality?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Настройка лиг для виджета топ матчей на главной странице
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topMatchesLeagues".
 */
export interface TopMatchesLeague {
  id: string;
  /**
   * Показывать ли виджет топ матчей на сайте
   */
  enabled?: boolean | null;
  /**
   * Заголовок, который будет отображаться над виджетом
   */
  title?: string | null;
  /**
   * Максимальное количество матчей для показа в виджете
   */
  maxMatches?: number | null;
  /**
   * Выберите лиги для отображения в виджете топ матчей
   */
  leagues?:
    | {
        /**
         * Выберите лигу
         */
        league: string | League;
        /**
         * Приоритет лиги (меньше число = выше приоритет)
         */
        priority?: number | null;
        /**
         * Показывать ли матчи из этой лиги
         */
        enabled?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Дополнительные настройки для фильтрации матчей
   */
  filterSettings?: {
    /**
     * Показывать матчи только из активных лиг
     */
    showOnlyActive?: boolean | null;
    /**
     * В каком временном диапазоне искать матчи
     */
    timeRange?: ('today' | 'tomorrow' | 'week' | 'month') | null;
    /**
     * Не показывать завершённые матчи
     */
    excludeFinished?: boolean | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Настройка списка лиг для левого сайдбара сайта
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sidebarLeagues".
 */
export interface SidebarLeague {
  id: string;
  /**
   * Включить/выключить отображение списка лиг в сайдбаре
   */
  enabled?: boolean | null;
  /**
   * Заголовок секции с лигами в сайдбаре
   */
  title?: string | null;
  /**
   * Максимальное количество лиг для показа в сайдбаре
   */
  maxItems?: number | null;
  /**
   * Отображать флаги стран рядом с названиями лиг
   */
  showFlags?: boolean | null;
  /**
   * Группировать лиги по странам в сайдбаре
   */
  groupByCountry?: boolean | null;
  /**
   * Выберите лиги для отображения в сайдбаре
   */
  leagues?:
    | {
        /**
         * Выберите лигу
         */
        league: string | League;
        /**
         * Оставьте пустым для использования оригинального названия лиги
         */
        customName?: string | null;
        /**
         * Порядок отображения в сайдбаре (меньше число = выше в списке)
         */
        priority?: number | null;
        /**
         * Показывать ли эту лигу в сайдбаре
         */
        enabled?: boolean | null;
        /**
         * HEX-код цвета для выделения лиги (например, #ff0000)
         */
        highlightColor?: string | null;
        /**
         * Отображать количество предстоящих матчей рядом с названием лиги
         */
        showMatchCount?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Дополнительные настройки внешнего вида сайдбара
   */
  displaySettings?: {
    /**
     * Показывать только активные лиги
     */
    showOnlyActive?: boolean | null;
    /**
     * Отображать уровень лиги (1-я лига, 2-я лига �� т.д.)
     */
    showTiers?: boolean | null;
    /**
     * Более компактное отображение списка лиг
     */
    compactMode?: boolean | null;
    /**
     * Отображать логотипы лиг (если доступны)
     */
    showLogos?: boolean | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topMatchesLeagues_select".
 */
export interface TopMatchesLeaguesSelect<T extends boolean = true> {
  enabled?: T;
  title?: T;
  maxMatches?: T;
  leagues?:
    | T
    | {
        league?: T;
        priority?: T;
        enabled?: T;
        id?: T;
      };
  filterSettings?:
    | T
    | {
        showOnlyActive?: T;
        timeRange?: T;
        excludeFinished?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sidebarLeagues_select".
 */
export interface SidebarLeaguesSelect<T extends boolean = true> {
  enabled?: T;
  title?: T;
  maxItems?: T;
  showFlags?: T;
  groupByCountry?: T;
  leagues?:
    | T
    | {
        league?: T;
        customName?: T;
        priority?: T;
        enabled?: T;
        highlightColor?: T;
        showMatchCount?: T;
        id?: T;
      };
  displaySettings?:
    | T
    | {
        showOnlyActive?: T;
        showTiers?: T;
        compactMode?: T;
        showLogos?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}